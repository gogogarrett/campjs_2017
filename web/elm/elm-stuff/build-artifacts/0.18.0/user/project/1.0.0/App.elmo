var _user$project$App$buildGameContext = function (gameId) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'game_id',
				_1: _elm_lang$core$Json_Encode$string(gameId)
			},
			_1: {ctor: '[]'}
		});
};
var _user$project$App$userParams = function (userId) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'user_id',
				_1: _elm_lang$core$Json_Encode$string(userId)
			},
			_1: {ctor: '[]'}
		});
};
var _user$project$App$renderPlayer = function (player) {
	return A2(
		_elm_lang$html$Html$li,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(_elm_lang$core$Basics_ops['++'], 'Player', player.id)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(player.score)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$App$renderPlayers = function (players) {
	return A2(_elm_lang$core$List$map, _user$project$App$renderPlayer, players);
};
var _user$project$App$Model = F5(
	function (a, b, c, d, e) {
		return {phxSocket: a, userId: b, history: c, route: d, players: e};
	});
var _user$project$App$Flags = function (a) {
	return {userId: a};
};
var _user$project$App$GameScopeContext = function (a) {
	return {scope: a};
};
var _user$project$App$newGameScope = function (scope) {
	return _user$project$App$GameScopeContext(scope);
};
var _user$project$App$GameContext = function (a) {
	return {game_id: a};
};
var _user$project$App$decodeGameContext = A2(
	_elm_lang$core$Json_Decode$map,
	_user$project$App$GameContext,
	A2(_elm_lang$core$Json_Decode$field, 'game_id', _elm_lang$core$Json_Decode$string));
var _user$project$App$ChannelContext = F2(
	function (a, b) {
		return {channel_topic: a, payload: b};
	});
var _user$project$App$buildChannelContext = F2(
	function (channelId, payLoad) {
		return A2(_user$project$App$ChannelContext, channelId, payLoad);
	});
var _user$project$App$PlayerScore = F2(
	function (a, b) {
		return {id: a, score: b};
	});
var _user$project$App$decodeGameState = A2(
	_elm_lang$core$Json_Decode$field,
	'players',
	_elm_lang$core$Json_Decode$list(
		A3(
			_elm_lang$core$Json_Decode$map2,
			_user$project$App$PlayerScore,
			A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$string),
			A2(_elm_lang$core$Json_Decode$field, 'score', _elm_lang$core$Json_Decode$int))));
var _user$project$App$UpdateGameScore = function (a) {
	return {ctor: 'UpdateGameScore', _0: a};
};
var _user$project$App$AnswerQuestion = function (a) {
	return {ctor: 'AnswerQuestion', _0: a};
};
var _user$project$App$UrlChange = function (a) {
	return {ctor: 'UrlChange', _0: a};
};
var _user$project$App$RequestGame = function (a) {
	return {ctor: 'RequestGame', _0: a};
};
var _user$project$App$GameReject = function (a) {
	return {ctor: 'GameReject', _0: a};
};
var _user$project$App$GameOffer = function (a) {
	return {ctor: 'GameOffer', _0: a};
};
var _user$project$App$initPhxSocket = function (userId) {
	return A4(
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
		_user$project$ChannelKeys$keyGameReject,
		_user$project$ChannelKeys$keyGameAssignerLobby,
		_user$project$App$GameReject,
		A4(
			_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
			_user$project$ChannelKeys$keyGameOffer,
			_user$project$ChannelKeys$keyGameAssignerLobby,
			_user$project$App$GameOffer,
			_fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
				_fbonetti$elm_phoenix_socket$Phoenix_Socket$init(
					_user$project$ChannelKeys$keySocketServer(userId)))));
};
var _user$project$App$init = F2(
	function (flags, location) {
		var currentRoute = _user$project$Routing$parseLocation(location);
		return {
			ctor: '_Tuple2',
			_0: A5(
				_user$project$App$Model,
				_user$project$App$initPhxSocket(flags.userId),
				flags.userId,
				{
					ctor: '::',
					_0: location,
					_1: {ctor: '[]'}
				},
				currentRoute,
				{ctor: '[]'}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$App$JoinChannel = function (a) {
	return {ctor: 'JoinChannel', _0: a};
};
var _user$project$App$page = function (model) {
	var _p0 = model.route;
	switch (_p0.ctor) {
		case 'LobbyRoute':
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('container'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h3,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Hello User ',
									A2(_elm_lang$core$Basics_ops['++'], model.userId, '!'))),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$App$JoinChannel(
										A2(_user$project$App$buildChannelContext, _user$project$ChannelKeys$keyGameAssignerLobby, '123'))),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Join channel'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$App$RequestGame(
											_user$project$App$newGameScope('world'))),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Join world'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$ul,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$li,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$href(
															A2(_elm_lang$core$Basics_ops['++'], '#', 'lobby')),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('lobby'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				});
		case 'GameRoute':
			var _p1 = _p0._0;
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('container'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h3,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Hello User ',
									A2(_elm_lang$core$Basics_ops['++'], model.userId, '!'))),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h6,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(_elm_lang$core$Basics_ops['++'], 'Game', _p1)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$App$JoinChannel(
											A2(
												_user$project$App$buildChannelContext,
												_user$project$ChannelKeys$keyGameChannel(_p1),
												'123'))),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Join channel'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$App$AnswerQuestion(
												_user$project$App$buildGameContext(_p1))),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Answer correctly'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$ul,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$li,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$href(
																A2(_elm_lang$core$Basics_ops['++'], '#', 'lobby')),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('lobby'),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$ul,
											{ctor: '[]'},
											_user$project$App$renderPlayers(model.players)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				});
		default:
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('abc'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('no page found'),
					_1: {ctor: '[]'}
				});
	}
};
var _user$project$App$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$App$page(model),
			_1: {ctor: '[]'}
		});
};
var _user$project$App$PhoenixMsg = function (a) {
	return {ctor: 'PhoenixMsg', _0: a};
};
var _user$project$App$update = F2(
	function (msg, model) {
		var x = A2(
			_elm_lang$core$Debug$log,
			'update(msg, model)',
			{ctor: '_Tuple2', _0: msg, _1: model});
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'JoinChannel':
				var channel = A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Channel$withPayload,
					_user$project$App$userParams(model.userId),
					_fbonetti$elm_phoenix_socket$Phoenix_Channel$init(_p2._0.channel_topic));
				var _p3 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, channel, model.phxSocket);
				var phxSocket = _p3._0;
				var phxCmd = _p3._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$App$PhoenixMsg, phxCmd)
				};
			case 'RequestGame':
				var payload = _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'user_id',
							_1: _elm_lang$core$Json_Encode$string(model.userId)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'scope',
								_1: _elm_lang$core$Json_Encode$string(_p2._0.scope)
							},
							_1: {ctor: '[]'}
						}
					});
				var push_ = A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
					payload,
					A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'request_game', _user$project$ChannelKeys$keyGameAssignerLobby));
				var _p4 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.phxSocket);
				var phxSocket = _p4._0;
				var phxCmd = _p4._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$App$PhoenixMsg, phxCmd)
				};
			case 'PhoenixMsg':
				var _p5 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p2._0, model.phxSocket);
				var phxSocket = _p5._0;
				var phxCmd = _p5._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$App$PhoenixMsg, phxCmd)
				};
			case 'GameOffer':
				var input_string = A2(_elm_lang$core$Json_Encode$encode, 0, _p2._0);
				var game_id = A2(_elm_lang$core$Json_Decode$decodeString, _user$project$App$decodeGameContext, input_string);
				var y = A2(
					_elm_lang$core$Result$withDefault,
					_user$project$App$GameContext('0'),
					game_id);
				var true_id = y.game_id;
				var game_channel_topic = _user$project$ChannelKeys$keyGameChannel(true_id);
				var aa = A4(
					_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
					_user$project$ChannelKeys$keyGameStateUpdated,
					game_channel_topic,
					_user$project$App$UpdateGameScore,
					A4(
						_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
						_user$project$ChannelKeys$keySubmitAnswer,
						game_channel_topic,
						_user$project$App$AnswerQuestion,
						_fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(model.phxSocket)));
				var answer_question_action = _user$project$App$AnswerQuestion(
					_user$project$App$buildGameContext(true_id));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							route: _user$project$Routing$GameRoute(true_id),
							phxSocket: aa
						}),
					_1: _elm_lang$navigation$Navigation$newUrl(
						A2(_elm_lang$core$Basics_ops['++'], '#games/', true_id))
				};
			case 'GameReject':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'AnswerQuestion':
				var payload = _elm_lang$core$Json_Encode$int(1);
				var input_string = A2(_elm_lang$core$Json_Encode$encode, 0, _p2._0);
				var game_id = A2(_elm_lang$core$Json_Decode$decodeString, _user$project$App$decodeGameContext, input_string);
				var y = A2(
					_elm_lang$core$Result$withDefault,
					_user$project$App$GameContext('0'),
					game_id);
				var true_id = y.game_id;
				var push_ = A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
					payload,
					A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$init,
						_user$project$ChannelKeys$keySubmitAnswer,
						_user$project$ChannelKeys$keyGameChannel(true_id)));
				var _p6 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.phxSocket);
				var phxSocket = _p6._0;
				var phxCmd = _p6._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$App$PhoenixMsg, phxCmd)
				};
			case 'UpdateGameScore':
				var input_string = A2(_elm_lang$core$Json_Encode$encode, 0, _p2._0);
				var x = A2(_elm_lang$core$Debug$log, 'input string', input_string);
				var players = function () {
					var _p7 = A2(_elm_lang$core$Json_Decode$decodeString, _user$project$App$decodeGameState, input_string);
					if (_p7.ctor === 'Ok') {
						return _p7._0;
					} else {
						return {
							ctor: '::',
							_0: A2(_user$project$App$PlayerScore, '0', 1),
							_1: {ctor: '[]'}
						};
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{players: players}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p8 = _p2._0;
				var currentRoute = _user$project$Routing$parseLocation(_p8);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							history: {ctor: '::', _0: _p8, _1: model.history},
							route: currentRoute
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$App$subscriptions = function (model) {
	return A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.phxSocket, _user$project$App$PhoenixMsg);
};
var _user$project$App$main = A2(
	_elm_lang$navigation$Navigation$programWithFlags,
	_user$project$App$UrlChange,
	{init: _user$project$App$init, update: _user$project$App$update, subscriptions: _user$project$App$subscriptions, view: _user$project$App$view})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (userId) {
			return _elm_lang$core$Json_Decode$succeed(
				{userId: userId});
		},
		A2(_elm_lang$core$Json_Decode$field, 'userId', _elm_lang$core$Json_Decode$string)));
