var _user$project$Main$userParams = function (userId) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'user_id',
				_1: _elm_lang$core$Json_Encode$string(userId)
			},
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$Flags = function (a) {
	return {userId: a};
};
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {phxSocket: a, userId: b, history: c};
	});
var _user$project$Main$GameScopeContext = function (a) {
	return {scope: a};
};
var _user$project$Main$newGameScope = function (scope) {
	return _user$project$Main$GameScopeContext(scope);
};
var _user$project$Main$NotFoundRoute = {ctor: 'NotFoundRoute'};
var _user$project$Main$LobbyRoute = {ctor: 'LobbyRoute'};
var _user$project$Main$UrlChange = function (a) {
	return {ctor: 'UrlChange', _0: a};
};
var _user$project$Main$RequestGame = function (a) {
	return {ctor: 'RequestGame', _0: a};
};
var _user$project$Main$GameReject = function (a) {
	return {ctor: 'GameReject', _0: a};
};
var _user$project$Main$GameOffer = function (a) {
	return {ctor: 'GameOffer', _0: a};
};
var _user$project$Main$initPhxSocket = A4(
	_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
	_user$project$ChannelKeys$keyGameReject,
	_user$project$ChannelKeys$keyGameAssignerLobby,
	_user$project$Main$GameReject,
	A4(
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
		_user$project$ChannelKeys$keyGameOffer,
		_user$project$ChannelKeys$keyGameAssignerLobby,
		_user$project$Main$GameOffer,
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
			_fbonetti$elm_phoenix_socket$Phoenix_Socket$init(_user$project$ChannelKeys$keySocketServer))));
var _user$project$Main$init = F2(
	function (flags, location) {
		return {
			ctor: '_Tuple2',
			_0: A3(
				_user$project$Main$Model,
				_user$project$Main$initPhxSocket,
				flags.userId,
				{
					ctor: '::',
					_0: location,
					_1: {ctor: '[]'}
				}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$Main$JoinChannel = {ctor: 'JoinChannel'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$JoinChannel),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Join channel'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							_user$project$Main$RequestGame(
								_user$project$Main$newGameScope('world'))),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Join world'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										A2(_elm_lang$core$Basics_ops['++'], '#', 'abc')),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('abc'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$PhoenixMsg = function (a) {
	return {ctor: 'PhoenixMsg', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var x = A2(
			_elm_lang$core$Debug$log,
			'update(msg, model)',
			{ctor: '_Tuple2', _0: msg, _1: model});
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'JoinChannel':
				var channel = A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Channel$withPayload,
					_user$project$Main$userParams(model.userId),
					_fbonetti$elm_phoenix_socket$Phoenix_Channel$init(_user$project$ChannelKeys$keyGameAssignerLobby));
				var _p1 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, channel, model.phxSocket);
				var phxSocket = _p1._0;
				var phxCmd = _p1._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
				};
			case 'RequestGame':
				var payload = _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'user_id',
							_1: _elm_lang$core$Json_Encode$string(model.userId)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'scope',
								_1: _elm_lang$core$Json_Encode$string(_p0._0.scope)
							},
							_1: {ctor: '[]'}
						}
					});
				var push_ = A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
					payload,
					A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'request_game', _user$project$ChannelKeys$keyGameAssignerLobby));
				var _p2 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.phxSocket);
				var phxSocket = _p2._0;
				var phxCmd = _p2._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
				};
			case 'PhoenixMsg':
				var _p3 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p0._0, model.phxSocket);
				var phxSocket = _p3._0;
				var phxCmd = _p3._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
				};
			case 'GameOffer':
				var x = A2(_elm_lang$core$Debug$log, 'GameOffer!', _p0._0);
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'GameReject':
				var x = A2(_elm_lang$core$Debug$log, 'GameReject!', _p0._0);
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							history: {ctor: '::', _0: _p0._0, _1: model.history}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$subscriptions = function (model) {
	return A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.phxSocket, _user$project$Main$PhoenixMsg);
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$programWithFlags,
	_user$project$Main$UrlChange,
	{init: _user$project$Main$init, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions, view: _user$project$Main$view})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (userId) {
			return _elm_lang$core$Json_Decode$succeed(
				{userId: userId});
		},
		A2(_elm_lang$core$Json_Decode$field, 'userId', _elm_lang$core$Json_Decode$string)));
